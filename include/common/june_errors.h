#pragma once

namespace LandaJune
{
	#define JUNE_NO_ERROR 0
	#define JUNE_GENERAL_ERROR -1

	template <typename E>
	constexpr auto to_underlying(E e) noexcept
	{
		return static_cast<std::underlying_type_t<E>>(e);
	}

	template <typename E>
	static int toInt(const E val)
	{
		return to_underlying(val);
	}

	namespace FrameProviders
	{
		enum class FRAME_PROVIDER_ERROR
		{
			  ERR_NO_ERROR = JUNE_NO_ERROR
			, ERR_GENERAL_ERROR = JUNE_GENERAL_ERROR
			, ERR_PROVIDER_CONFIG_FILE_DOES_NOT_EXIST = 100
			, ERR_PROVIDER_INVALID_CONFIG_FILE
			, ERR_PROVIDER_INVALID_SELECTED_PROVIDER
			, ERR_FRAMEGRABBER_LOAD_APPLET_FAILED
			, ERR_FRAMEGRABBER_LOAD_CONFIG_FAILED
			, ERR_FRAMEGRABBER_CANNOT_GET_PROPERTY
			, ERR_FRAMEGRABBER_MEMORY_ALLOCATION_FAILED
			, ERR_FRAMEGRABBER_IMAGE_ACQUISITION_FAILED
			, ERR_FRAMEGRABBER_IMAGE_TIMEOUT
			, ERR_FRAMEGRABBER_IMAGE_INVALID_DATA_POINTER
			, ERR_FRAMEGRABBER_IMAGE_SKIPPED
			, ERR_FGSIMULATOR_NO_FILE_FOUND
			, ERR_OFFLINEREADER_SOURCE_FOLDER_INVALID
			, ERR_OFFLINEREADER_SOURCE_FILE_INVALID
			, ERR_OFFLINEREADER_NO_MORE_FILES
			, ERR_SIMULATOR_HAVE_NO_IMAGES
			, ERR_SIMULATOR_REACHED_MAX_COUNT
			, ERROR_LAST
		};

		#define ERR_NOT_IMPLEMENTED FRAME_PROVIDER_ERROR::ERR_NO_ERROR
	}


	namespace Core
	{
		enum class CORE_ENGINE_ERROR
		{
			  ERR_NO_ERROR = JUNE_NO_ERROR
			, ERR_GENERAL_ERROR = JUNE_GENERAL_ERROR
			, ERR_CORE_NOT_INITIALIZED = 300
			, ERR_CORE_NO_PROVIDER_SELECTED
			, ERR_CORE_NO_ALGORITHM_RUNNER_SELECTED
			, ERR_CORE_PROVIDER_IS_BUSY
			, ERR_CORE_PROVIDER_THROWN_RUNTIME_EXCEPTION
			, ERR_CORE_PROVIDER_FAILED_TO_INIT
			, ERR_CORE_ALGO_RUNNER_THROWN_RUNTIME_EXCEPTION
			, ERROR_LAST
		};

		enum class FRAME_REF_ERROR
		{
			ERR_NO_ERROR = JUNE_NO_ERROR
			, ERR_GENERAL_ERROR = JUNE_GENERAL_ERROR
			, ERR_FRAME_INVALID_INIT_DATA = 200
			, ERR_FRAME_INVALID_IMAGE_FORMAT
			, ERR_FRAME_INVALID_FRAME_IMAGE_DIMS
			, ERR_FRAME_INVALID_BATCH_PARAMS
			, ERR_FRAME_NO_FRAME_REGIONS
			, ERR_FRAME_DIFFERENT_EXPECTED_SIZE
			, ERR_FRAME_INSUFFICIENT_BUFFER_SIZE
			, ERROR_LAST
		};
	}

	namespace Algorithms
	{
		enum class ALGORITHM_ERROR
		{
			ERR_NO_ERROR = JUNE_NO_ERROR
			, ERR_GENERAL_ERROR = JUNE_GENERAL_ERROR
			, ALGO_ROI_RECT_IS_EMPTY = 400
			, ALGO_ROI_INVALID_RECT 
			, ALGO_ROI_RECT_EXCEEDS_FRAME_RECT 
			, ALGO_INVALID_SOURCE_IMAGE
			, ALGO_EMPTY_ROI_NAME_TO_SAVE
			, ERROR_LAST
		};

		enum OUT_STATUS
		{
			ALG_STATUS_SUCCESS,
			ALG_STATUS_FAILED,
			ALG_STATUS_EXCEPTION_THROWN,
			ALG_STATUS_CIRCLE_NOT_FOUND,
			ALG_STATUS_CORRUPT_CIRCLE,
			ALG_STATUS_TOO_MANY_CIRCLES,
			ALG_STATUS_NOT_ENOUGH_CIRCLES,
			ALG_STATUS_NUM
		};
	}
}